% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_model.R
\name{plot_model}
\alias{plot_model}
\title{Plot keras model}
\usage{
plot_model(model, ...)
}
\arguments{
\item{model}{A keras model defined using \link[keras:keras_model_sequential]{keras::keras_model_sequential} or \link[keras:keras_model]{keras::keras_model}}

\item{...}{not used}
}
\description{
Plot keras model
}
\examples{
require(keras)

# Functional model example from https://keras.rstudio.com/articles/functional_api.html

model <- local({
  main_input <- layer_input(shape = c(100), dtype = 'int32', name = 'main_input')

  lstm_out <- main_input \%>\%
    layer_embedding(input_dim = 10000, output_dim = 512, input_length = 100) \%>\%
    layer_lstm(units = 32)

  auxiliary_output <- lstm_out \%>\%
    layer_dense(units = 1, activation = 'sigmoid', name = 'aux_output')

  auxiliary_input <- layer_input(shape = c(5), name = 'aux_input')

  main_output <- layer_concatenate(c(lstm_out, auxiliary_input)) \%>\%
    layer_dense(units = 64, activation = 'relu') \%>\%
    layer_dense(units = 64, activation = 'relu') \%>\%
    layer_dense(units = 64, activation = 'relu') \%>\%
    layer_dense(units = 1, activation = 'sigmoid', name = 'main_output')

  keras_model(
    inputs = c(main_input, auxiliary_input),
    outputs = c(main_output, auxiliary_output)
  )
})

model

model \%>\% plot_model()

require(keras)

# Functional model example from https://keras.rstudio.com/articles/functional_api.html

model <- local({
  main_input <- layer_input(shape = c(100), dtype = 'int32', name = 'main_input')

  lstm_out <- main_input \%>\%
    layer_embedding(input_dim = 10000, output_dim = 512, input_length = 100) \%>\%
    layer_lstm(units = 32)

  auxiliary_output <- lstm_out \%>\%
    layer_dense(units = 1, activation = 'sigmoid', name = 'aux_output')

  auxiliary_input <- layer_input(shape = c(5), name = 'aux_input')

  main_output <- layer_concatenate(c(lstm_out, auxiliary_input)) \%>\%
    layer_dense(units = 64, activation = 'relu') \%>\%
    layer_dense(units = 64, activation = 'relu') \%>\%
    layer_dense(units = 64, activation = 'relu') \%>\%
    layer_dense(units = 1, activation = 'sigmoid', name = 'main_output')

  keras_model(
    inputs = c(main_input, auxiliary_input),
    outputs = c(main_output, auxiliary_output)
  )
})

model

model \%>\% plot_model()

# Creates a network that illustrates depthwise separable convolution


library(keras)

model <- local({
  input <-
    layer_input(shape = c(3, 64, 64),
                dtype = 'float32',
                name = 'input')

  conv_1x1 <- input \%>\%
    layer_conv_2d(8, kernel_size = c(1, 1), name = "1x1_convolution")


  conv_1 <- conv_1x1 \%>\%
    layer_conv_2d(8, kernel_size = c(3, 3), name = "3x3_convolution_1")

  conv_2 <- conv_1x1 \%>\%
    layer_conv_2d(8, kernel_size = c(3, 3), name = "3x3_convolution_2")

  conv_3 <- conv_1x1 \%>\%
    layer_conv_2d(8, kernel_size = c(3, 3), name = "3x3_convolution_3")

  output <- layer_concatenate(
    c(conv_1, conv_2, conv_3),
    name = "concat"
  )

  keras_model(inputs = c(input),
              outputs = c(output))

})

model
model \%>\% plot_model()




}
